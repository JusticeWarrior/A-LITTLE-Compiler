
%code{
  #include <string>
  #include <stdint.h>
  #include "tokens.hpp"
  #include "scanner.hpp"
  #include "parser.hpp"

  #undef yylex
  #define yylex scanner.yylex

  #undef yyparse
  //#define yyparse LittleParser::yyparse
  //#undef yyerror
  //#define yyerror LittleParser::error

  //#undef YYPARSE_PARAM

  void yyerror (LittleParser& parser, LittleScanner& scanner, const char* err);
}

%parse-param {LittleParser& parser}
%parse-param {LittleScanner& scanner}


%union{
  double float_val;
  int int_val;
  char* str_val;
}

%token    <int_val> PROGRAM
%token    <int_val> END
%token    <str_val> IDENTIFIER
%token    <str_val> STRING
%token    <str_val> STRINGLITERAL
%token    <str_val> FLOAT
%token    <str_val> INT
%token    <str_val> VOID
%token    <str_val> FUNCTION
%token    <str_val> BEGINT
%token    <str_val> READ
%token    <str_val> WRITE
%token    <str_val> RETURN
%token    <int_val> INTLITERAL
%token    <str_val> FLOATLITERAL
%token    <str_val> PLUS
%token    <str_val> MINUS
%token    <str_val> MULTIPLY
%token    <str_val> DIVIDE
%token    <str_val> IF
%token    <str_val> ENDIF
%token    <str_val> ELSIF
%token    <str_val> TRUE
%token    <str_val> FALSE
%token    <str_val> LESSTHAN
%token    <str_val> GREATERTHAN
%token    <str_val> EQUAL
%token    <str_val> NOTEQUAL
%token    <str_val> LESSTHANEQUAL
%token    <str_val> GREATERTHANEQUAL
%token    <str_val> DO
%token    <str_val> WHILE
%token    <str_val> CONTINUE
%token    <str_val> BREAK
%token    <str_val> COMMENT
%token    <str_val> COLONEQUAL
%token    <str_val> PARANTHLEFT
%token    <str_val> PARANTHRIGHT
%token    <str_val> SEMICOLON
%token    <str_val> COMMA

%%
  /* Program */
  program: PROGRAM id BEGINT pgm_body END ;
  id: IDENTIFIER ;
  pgm_body: decl func_declarations ;
  decl: string_decl decl | var_decl decl | ;

  /* Global String Declaration */
  string_decl: STRING id COLONEQUAL str SEMICOLON ;
  str: STRINGLITERAL;

  /* Variable Declaration */
  var_decl: var_type id_list SEMICOLON ;
  var_type: FLOAT | INT ;
  any_type: var_type | VOID ;
  id_list: id id_tail ;
  id_tail: COMMA id id_tail | ;

  /* Function Paramater List */
  param_decl_list: param_decl param_decl_tail | ;
  param_decl: var_type id ;
  param_decl_tail: COMMA param_decl param_decl_tail | ;

  /* Function Declarations */
  func_declarations: func_decl func_declarations | ;
  func_decl: FUNCTION any_type id PARANTHLEFT param_decl_list PARANTHRIGHT BEGINT func_body END ;
  func_body: decl stmt_list ;

  /* Statement List */
  stmt_list: stmt stmt_list | ;
  stmt: base_stmt | if_stmt | do_while_stmt ;
  base_stmt: assign_stmt | read_stmt | write_stmt | return_stmt ;

  /* Basic Statements */
  assign_stmt: assign_expr SEMICOLON ;
  assign_expr: id COLONEQUAL expr ;
  read_stmt: READ PARANTHLEFT id_list PARANTHRIGHT SEMICOLON ;
  write_stmt: WRITE PARANTHLEFT id_list PARANTHRIGHT SEMICOLON ;
  return_stmt: RETURN expr SEMICOLON ;

  /* Expressions */
  expr: expr_prefix factor ;
  expr_prefix: expr_prefix factor addop | ;
  factor: factor_prefix postfix_expr ;
  factor_prefix: factor_prefix postfix_expr mulop | ;
  postfix_expr: primary | call_expr ;
  call_expr: id PARANTHLEFT expr_list PARANTHRIGHT ;
  expr_list: expr expr_list_tail | ;
  expr_list_tail: COMMA expr expr_list_tail | ;
  primary: PARANTHLEFT expr PARANTHRIGHT | id | INTLITERAL | FLOATLITERAL ;
  addop: PLUS | MINUS ;
  mulop: MULTIPLY | DIVIDE ;

  /* Complex Statements and Condition */
  if_stmt: IF PARANTHLEFT cond PARANTHRIGHT decl stmt_list else_part ENDIF ;
  else_part: ELSIF PARANTHLEFT cond PARANTHRIGHT decl stmt_list else_part | ;
  cond: expr compop expr | TRUE | FALSE ;
  compop: LESSTHAN | GREATERTHAN | EQUAL | NOTEQUAL | LESSTHANEQUAL | GREATERTHANEQUAL ;

  do_while_stmt: DO decl stmt_list WHILE PARANTHLEFT cond PARANTHRIGHT SEMICOLON ;
%%

void yyerror(LittleParser& parser, LittleScanner& scanner, const char* error){
    return parser.error(error);
  }

