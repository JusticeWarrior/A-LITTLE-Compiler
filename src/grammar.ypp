
%code{
  #include <string>
  #include <stdint.h>
  #include "tokens.hpp"
  #include "scanner.hpp"
  #include "parser.hpp"

  #undef yylex
  #define yylex scanner.yylex

  #undef yyparse
  //#define yyparse LittleParser::yyparse
  //#undef yyerror
  //#define yyerror LittleParser::error

  //#undef YYPARSE_PARAM

  void yyerror (LittleParser& parser, LittleScanner& scanner, const char* err);
}

%parse-param {LittleParser& parser}
%parse-param {LittleScanner& scanner}


%union{
  double float_val;
  int int_val;
  char* str_val;
}

%token    <int_val> PROGRAM
%token    <int_val> END
%token    <str_val> IDENTIFIER
%token    <str_val> STRING
%token    <str_val> STRINGLITERAL
%token    <str_val> FLOAT
%token    <str_val> INT
%token    <str_val> VOID
%token    <str_val> FUNCTION
%token    <str_val> BEGIN
%token    <str_val> READ
%token    <str_val> WRITE
%token    <str_val> RETURN
%token    <int_val> INTLITERAL
%token    <str_val> FLOATLITERAL
%token    <str_val> PLUS
%token    <str_val> MINUS
%token    <str_val> MULTIPLY
%token    <str_val> DIVIDE
%token    <str_val> IF
%token    <str_val> ENDIF
%token    <str_val> ELSIF
%token    <str_val> TRUE
%token    <str_val> FALSE
%token    <str_val> LESSTHAN
%token    <str_val> GREATERTHAN
%token    <str_val> EQUAL
%token    <str_val> NOTEQUAL
%token    <str_val> LESSTHANEQUAL
%token    <str_val> GREATERTHANEQUAL
%token    <str_val> DO
%token    <str_val> WHILE
%token    <str_val> CONTINUE
%token    <str_val> BREAK
%token    <str_val> COMMENT
%token    <str_val> COLONEQUAL
%token    <str_val> PARANTHLEFT
%token    <str_val> PARANTHRIGHT
%token    <str_val> SEMICOLON
%token    <str_val> COMMA

%%
  stmt_list:
    | stmt_list stmt
    ;  
  stmt
    : WHILE
    | IDENTIFIER
    ;

%%

void yyerror(LittleParser& parser, LittleScanner& scanner, const char* error){
    return parser.error(error);
  }

