
%code{
  #include <string>
  #include <vector>
  #include <stdint.h>
  #include <typeinfo>
  // Debugging only
  #include <sstream>
  #include "tokens.hpp"
  #include "scanner.hpp"
  #include "parser.hpp"
  #include "symbol.hpp"
  #include "data_object.hpp"
  #include "condition_object.hpp"

  #undef yylex
  #define yylex scanner.yylex

  #define str_arr_t std::vector<char*>
  #define sym_arr_t std::list<Symbol*>
  #define expr_list_t std::list<DataObject*>
  //#define half_expr_t std::pair<int, DataObject*>

  #undef yyparse
  //#define half_expr_is_valid(half_expr) \
  //  ((half_expr).second != 0)
  int block_num=1;
  int label_num=0;

  void yyerror (LittleParser& parser, LittleScanner& scanner, const char* err);
}

%parse-param {LittleParser& parser}
%parse-param {LittleScanner& scanner}


%union{
  double float_val;
  int int_val;
  char* str_val;
  void* str_arr;

  // std::vector<Symbol*>*
  void* sym_arr;

  // Symbol*
  void* sym;

  // Operation enum
  int op;

  // Comparison enum
  int comp_op;

  // DataObject*
  void* data_obj;

  // std::pair<op, DataObject*>*
  void* half_expr;

  // ConditionObject*
  void* condition_obj;

  // expr_list_t*
  void * expr_list_obj;


}

%token    <int_val> PROGRAM
%token    <int_val> END
%token    <str_val> IDENTIFIER
%token    <str_val> STRING
%token    <str_val> STRINGLITERAL
%token    <str_val> FLOAT
%token    <str_val> INT
%token    <str_val> VOID
%token    <str_val> FUNCTION
%token    <str_val> BEGINT
%token    <str_val> READ
%token    <str_val> WRITE
%token    <str_val> RETURN
%token    <str_val> INTLITERAL
%token    <str_val> FLOATLITERAL
%token    <str_val> PLUS
%token    <str_val> MINUS
%token    <str_val> MULTIPLY
%token    <str_val> DIVIDE
%token    <str_val> IF
%token    <str_val> ENDIF
%token    <str_val> ELSIF
%token    <str_val> TRUE
%token    <str_val> FALSE
%token    <str_val> LESSTHAN
%token    <str_val> GREATERTHAN
%token    <str_val> EQUAL
%token    <str_val> NOTEQUAL
%token    <str_val> LESSTHANEQUAL
%token    <str_val> GREATERTHANEQUAL
%token    <str_val> DO
%token    <str_val> WHILE
%token    <str_val> CONTINUE
%token    <str_val> BREAK
%token    <str_val> COMMENT
%token    <str_val> COLONEQUAL
%token    <str_val> PARANTHLEFT
%token    <str_val> PARANTHRIGHT
%token    <str_val> SEMICOLON
%token    <str_val> COMMA

%type     <str_val> id
%type     <str_val> str
%type     <str_arr> id_list
%type     <str_arr> id_tail

%type     <sym_arr> param_decl_list
%type	  <sym_arr> param_decl_tail
%type	  <sym>	    param_decl
%type     <int_val> var_type
%type     <int_val> any_type

%type	  <op>	    mulop
%type     <op>	    addop

%type	  <data_obj>	    primary
%type	  <data_obj>	    expr
%type	  <data_obj>	    factor
%type	  <data_obj>	    postfix_expr
%type	  <data_obj>	    call_expr

%type	  <half_expr> factor_prefix
%type	  <half_expr> expr_prefix

%type	  <comp_op>   compop
%type     <condition_obj>      cond

%type	  <expr_list_obj> expr_list
%type	  <expr_list_obj> expr_list_tail

%%
  /* Program */
  program
    : program_head id BEGINT pgm_body END {
      parser.table_factory.pop_table();
      free($2);
    }
    ;
  program_head
    : PROGRAM {
      parser.table_factory.push_table("GLOBAL");
      }
    ;
  id
    : IDENTIFIER 
    ;
  pgm_body
    : decl func_declarations 
    ;
  decl
    : string_decl decl 
    | var_decl decl 
    | 
    ;

  /* Global String Declaration */
  string_decl
    : STRING id COLONEQUAL str SEMICOLON {
      Symbol::T value;
      value.s = $4;
      if (! parser.table_factory.insert_symbol(Symbol($2, Symbol::STRING, value))){
	free($2);
	yyerror(parser,scanner, "Redeclaration Error");
	YYABORT;
      }
      else
	free($2);
    };
  str
    : STRINGLITERAL {$$ = $1;}
    ;

  /* Variable Declaration */
  var_decl
    : var_type id_list SEMICOLON {
      str_arr_t* pArr = static_cast<str_arr_t*>($2);
      str_arr_t::iterator it;
      for (it = pArr->begin(); it != pArr->end(); it++){
	Symbol::T fun;
	Symbol sym (*it, static_cast<Symbol::Types>($1), fun);
	if(!parser.table_factory.insert_symbol(sym)){
	  yyerror(parser,scanner, "Redeclaration Error");
	  YYABORT;
	}
      }
    }
    ;
  var_type
    : FLOAT {$$ = Symbol::FLOAT;}
    | INT {$$ = Symbol::INT;}
    ;
  any_type
    : var_type 
    | VOID {$$ = Symbol::VOID;} 
    ;
  id_list
    : id id_tail {
      str_arr_t* pArr;
      $$ = $2;
      pArr = static_cast<str_arr_t*>($2);
      pArr->insert(pArr->begin(), $1);
    }
    ;
  id_tail
    : COMMA id id_tail {
      str_arr_t* pArr;
      $$ = $3;
      pArr = static_cast<str_arr_t*>($3);
      pArr->insert(pArr->begin(), $2);
    }
    | {
      str_arr_t* str_arr = new str_arr_t();
      parser.register_str_arr(str_arr);
      $$ = static_cast<void*>(str_arr);
    }
    ;

  /* Function Paramater List */
  param_decl_list
    : param_decl param_decl_tail {
      int param_num = 0;
      sym_arr_t* pArr = static_cast<sym_arr_t*>($2);
      Symbol* pSym = static_cast<Symbol*>($1);
      pArr->push_front(pSym);
      $$ = pArr;
      sym_arr_t::iterator it;
      for (it = pArr->begin(); it != pArr->end(); it++){
	pSym = *it;
	pSym->Context = Symbol::PARAMETER;
	pSym->parameter_number = ++param_num;
	if (!parser.table_factory.insert_symbol(*pSym)){
	  yyerror(parser,scanner, "Redeclaration Error");
	  YYABORT;
	}
      }
      parser.set_argc(param_num);
    }
    | {$$ = 0;}
    ;
  param_decl
    : var_type id{
      Symbol::T value;
      $$ = static_cast<void*>( 
	new Symbol($2, static_cast<Symbol::Types>($1), value)
	);
      free($2);
    }
    ;
  param_decl_tail
    : COMMA param_decl param_decl_tail {
      sym_arr_t* pArr = static_cast<sym_arr_t*>($3);
      Symbol* pSym = static_cast<Symbol*>($2);
      pArr->push_front(pSym);
      $$ = $3;
    }
    | {
	sym_arr_t* sym_arr = new sym_arr_t();
	$$ = static_cast<void*>(sym_arr);
	parser.register_sym_arr(sym_arr);
      }
    ;

  /* Function Declarations */
  func_declarations
    : func_decl func_declarations 
    |
    ;
  func_head
    : FUNCTION any_type id {
      Symbol::T t;
      // First, add the function as a symbol to the current scope:
      Symbol symbol = Symbol($3, static_cast<Symbol::Types>($2), t);
      symbol.Context = Symbol::FUNCTION;
      parser.table_factory.insert_symbol (symbol);

      // Next, add a new symbol table for the function
      parser.table_factory.push_table($3);

      // Now create an object to hold the iri code for the function
      parser.start_function($3);

      // Free the id
      free($3);
    }
    ;
  func_decl
    : func_head PARANTHLEFT param_decl_list PARANTHRIGHT BEGINT func_body END {
      parser.finish_function();
      parser.table_factory.pop_table();
    }
    ;
  func_body
    : decl stmt_list 
    ;

  /* Statement List */
  stmt_list
    : stmt stmt_list 
    | 
    ;
  stmt
    : base_stmt 
    | if_stmt 
    | do_while_stmt 
    ;
  base_stmt
    : assign_stmt 
    | read_stmt 
    | write_stmt 
    | return_stmt 
    ;

  /* Basic Statements */
  assign_stmt
    : assign_expr SEMICOLON 
    ;
  assign_expr
    : id COLONEQUAL expr {
      IRI* iri;
      DataObject* dest = new DataObject(parser.table_factory.get_symbol($1));
      DataObject* src = static_cast<DataObject*>($3);
      parser.data_object_set.register_object(dest);
      if (dest->data_type == DataObject::FLOAT)
	iri = IRI::create(IRI::STOREF, src->get_operand(), dest->get_operand());
      else
	iri = IRI::create(IRI::STOREI, src->get_operand(), dest->get_operand());
      parser.iri_list_push_back(iri);

      free($1);
    } 
    ;
  read_stmt
    : READ PARANTHLEFT id_list PARANTHRIGHT SEMICOLON {
      // For each name in the id_list, generate a read statement
      Symbol* symbol;
      IRI* iri;
      str_arr_t* str_arr = static_cast<str_arr_t*>($3);
      str_arr_t::iterator it;
      for (it = str_arr->begin(); it != str_arr->end(); it++) {
	symbol = parser.table_factory.get_symbol(*it);
	if (!symbol)
	  throw std::string("Symbol ") + *it + " not found!";
	DataObject data_object = DataObject(symbol);
	iri = IRI::create(
	  data_object.data_type == DataObject::FLOAT ? IRI::READF : IRI::READI,
	  data_object.get_operand()
	);
	parser.iri_list_push_back(iri);
      }
    }
    ;
  write_stmt
    : WRITE PARANTHLEFT id_list PARANTHRIGHT SEMICOLON {
      // For each name in the id_list, generate a write statement
      Symbol* symbol;
      IRI* iri;
      str_arr_t* str_arr = static_cast<str_arr_t*>($3);
      str_arr_t::iterator it;
      for (it = str_arr->begin(); it != str_arr->end(); it++) {
	symbol = parser.table_factory.get_symbol(*it);
	if (!symbol)
	  throw std::string("Symbol ") + *it + " not found!";
	DataObject data_object = DataObject(symbol);
	iri = IRI::create(
	  data_object.data_type == DataObject::FLOAT ? IRI::WRITEF : (data_object.data_type == DataObject::STRING ? IRI::WRITES : IRI::WRITEI),
	  data_object.get_operand()
	);
	parser.iri_list_push_back(iri);
      }
    }
    ;
  return_stmt
    : RETURN expr SEMICOLON {
	IRI* iri;
	IRI::Types type;
	DataObject* data_object = static_cast<DataObject*>($2);
	if (data_object->data_type == DataObject::FLOAT)
	  type = IRI::STOREF;
	else
	  type = IRI::STOREI;
	iri = IRI::create(type, data_object->get_operand(), Operand(Operand::RETURN, 0xDEADBEEF));
	parser.iri_list_push_back(iri);
	parser.iri_list_push_back(IRI::create(
	  IRI::RET, Operand(Operand::LABEL, "")
	));
      }
    ;

  /* Expressions */
  expr
    : expr_prefix factor {
      half_expr_t* half_expr = static_cast<half_expr_t*>($1);
      IRI* iri;
      DataObject *result, *rhs;
      rhs = static_cast<DataObject*>($2);
      result = DataObject::evaluate_expression(half_expr, &iri, rhs);
      parser.data_object_set.register_object(result);
      if (iri){
	parser.iri_list_push_back(iri);
      }
      $$ = result;
      }
    ;
  expr_prefix
    : expr_prefix factor addop {
      half_expr_t* half_expr = static_cast<half_expr_t*>($1);
      half_expr_t* new_half_expr;
      IRI* iri;
      DataObject *result, *rhs;
      rhs = static_cast<DataObject*>($2);
      result = DataObject::evaluate_expression(half_expr, &iri, rhs);
      parser.data_object_set.register_object(result);
	if (iri){
	  parser.iri_list_push_back(iri);
	}
      new_half_expr = new half_expr_t($3, result);
      parser.half_expr_set.register_object(new_half_expr);
      $$ = static_cast<void*>(new_half_expr);
    }
    | {
	half_expr_t* half_expr = new half_expr_t(0, (DataObject*)0);
	parser.half_expr_set.register_object(half_expr);
	$$ = static_cast<void*>(half_expr);
      }
    ;
  factor
    : factor_prefix postfix_expr {
      half_expr_t* half_expr = static_cast<half_expr_t*>($1);
      IRI* iri;
      DataObject *result, *rhs;
      rhs = static_cast<DataObject*>($2);
      result = DataObject::evaluate_expression(half_expr, &iri, rhs);
      parser.data_object_set.register_object(result);
	if (iri){
	  parser.iri_list_push_back(iri);
	}
      $$ = result;
    }
    ;
  factor_prefix
    : factor_prefix postfix_expr mulop {
      half_expr_t* half_expr = static_cast<half_expr_t*>($1);
      half_expr_t* new_half_expr;
      IRI* iri;
      DataObject *result, *rhs;
      rhs = static_cast<DataObject*>($2);
      result = DataObject::evaluate_expression(half_expr, &iri, rhs);
      parser.data_object_set.register_object(result);
      if (iri){
	parser.iri_list_push_back(iri);
      }
      new_half_expr = new half_expr_t($3, result);
      parser.half_expr_set.register_object(new_half_expr);
      $$ = static_cast<void*>(new_half_expr);
    }
    | {
	half_expr_t* half_expr = new half_expr_t(0, (DataObject*)0);
	parser.half_expr_set.register_object(half_expr);
	$$ = static_cast<void*>(half_expr);
      }
    ;
  postfix_expr
    : primary 
    | call_expr
    ;
  call_expr
    : id PARANTHLEFT expr_list PARANTHRIGHT {

	expr_list_t* expr_list = static_cast<expr_list_t*>($3);
	IRI* new_iri;

	// 1 PUSH RETURN VALUE
	parser.iri_list_push_back(IRI::create(IRI::PUSH,
	  Operand(Operand::LABEL, "")
	));

	// 2 PUSH PARAMETERS
	for (auto it=expr_list->begin(); it != expr_list->end(); it++){
	  //it-> Finish this to push stuff onto the stack.
	  new_iri = IRI::create(IRI::PUSH, (*it)->get_operand());
	  parser.iri_list_push_back(new_iri);
	}

	// 3 JSR TO SUBROUTINE
	parser.iri_list_push_back(IRI::create(
	  IRI::JSR,
	  Operand(Operand::LABEL, $1)
	));

	// 4 POP PARAMETERS
	for (auto it=expr_list->begin(); it != expr_list->end(); it++){
	  new_iri = IRI::create(IRI::POP, Operand(Operand::LABEL, ""));
	  parser.iri_list_push_back(new_iri);
	} 
	// 5 POP RETURN VALUE
	Symbol* sym = parser.table_factory.get_symbol($1);//[???] What if this is void?
	DataObject::DataType type;
	switch(sym->Type) {
	  case Symbol::FLOAT: type = DataObject::FLOAT; break;
	  default: type = DataObject::INT; break;
	}
	DataObject* retval = new DataObject(type); // [???]
	new_iri = IRI::create(IRI::POP, retval->get_operand());
	parser.iri_list_push_back(new_iri);
	$$ = retval;

	// 5.1 Cleanup memory
	delete expr_list;
	free($1);
      } 
    ;
  expr_list
    : expr expr_list_tail {
	static_cast<expr_list_t*>($2)->push_back(
	  static_cast<DataObject*>($1)
	);
	$$ = $2;
    }
    | {$$ = new expr_list_t();}
    ;
  expr_list_tail
    : COMMA expr expr_list_tail {
	static_cast<expr_list_t*>($3)->push_back(
	  static_cast<DataObject*>($2)
	);
	$$ = $3;
      }
    | {$$ = new expr_list_t();}
    ;
  primary
    : PARANTHLEFT expr PARANTHRIGHT {$$ = $2;} 
    | id {
	IRI* iri;
	Symbol* sym = parser.table_factory.get_symbol($1);
	DataObject* data_object;
	if (!sym)
	  throw "symbol not in table!";
	data_object = new DataObject(sym);
	parser.data_object_set.register_object(data_object);
	if (data_object->data_type != DataObject::STRING) {
	  DataObject* temporary;
	  temporary = new DataObject(data_object->data_type);
	  // Generate move from variable to temporary
	  // This could be done only on assignment if necessary to make things faster
	  
	  parser.data_object_set.register_object(temporary);
	  if (temporary->data_type == DataObject::FLOAT)
	    iri = IRI::create(IRI::STOREF, data_object->get_operand(), temporary->get_operand());
	  else
	    iri = IRI::create(IRI::STOREI, data_object->get_operand(), temporary->get_operand());
	  parser.iri_list_push_back(iri);

	  $$ = static_cast<void*>(temporary);
	}
	else {
	  $$ = static_cast<void*>(data_object);
	}
	free($1);
      }
    | INTLITERAL {
	Operand int_literal = Operand(Operand::LITERAL, $1);
	int_literal.DataType = Operand::INT;
	DataObject* data_object = new DataObject(DataObject::INT); // Store this in a temp register
	parser.data_object_set.register_object(data_object);
	IRI* iri = IRI::create(IRI::STOREI, int_literal, data_object->get_operand());
	parser.iri_list_push_back(iri);
	$$ = static_cast<void*>(data_object);
	free($1);
      }
    | FLOATLITERAL {
	Operand int_literal = Operand(Operand::LITERAL, $1);
	int_literal.DataType = Operand::FLOAT;
	DataObject* data_object = new DataObject(DataObject::FLOAT); // Store this in a temp register
	parser.data_object_set.register_object(data_object);
	IRI* iri = IRI::create(IRI::STOREF, int_literal, data_object->get_operand());
	parser.iri_list_push_back(iri);
	$$ = static_cast<void*>(data_object);
	free($1);
      }

    ;
  addop
    : PLUS {$$ = ADD;}
    | MINUS {$$ = SUB;}
    ;
  mulop
  : MULTIPLY {$$ = MUL;}
  | DIVIDE {$$ = DIV;}
  ;

  /* Complex Statements and Condition */
  /*if_stmt: IF PARANTHLEFT cond PARANTHRIGHT decl stmt_list else_part ENDIF ;*/
  if_head
    : IF {
      std::string name ("BLOCK ");
      std::string num = std::to_string(static_cast<long long>(block_num++));
      name += num;
      parser.table_factory.push_table(name);

      //Code generation
      parser.push_label(label_num++);
    }
    ;
  if_part
    : if_head PARANTHLEFT cond {
	ConditionObject* condition_obj;
	IRI* iri;

	parser.push_label(label_num++);

	condition_obj = static_cast<ConditionObject*>($3);
	condition_obj->invert();
	iri = condition_obj->generate_jump(parser.peek_label());
	if (iri) {
	  parser.iri_list_push_back(iri);
	}
	delete condition_obj;
      } PARANTHRIGHT decl stmt_list {

	parser.table_factory.pop_table();

	// Generate code
	IRI* end_if_label;
	IRI* jump_to_end;

	end_if_label = parser.label_to_iri(parser.peek_label());
	parser.pop_label();
	jump_to_end = parser.jump_to_label(parser.peek_label());
	parser.iri_list_push_back(jump_to_end);
	parser.iri_list_push_back(end_if_label);
      }
    ;
  else_head
    : ELSIF {
      std::string name ("BLOCK ");
      std::string num = std::to_string(static_cast<long long>(block_num++));
      name += num;
      parser.table_factory.push_table(name);

    }
    ;
  else_part
    : else_head PARANTHLEFT cond {
	ConditionObject* condition_obj;
	IRI* iri;

	parser.push_label(label_num++);

	condition_obj = static_cast<ConditionObject*>($3);
	condition_obj->invert();
	iri = condition_obj->generate_jump(parser.peek_label());

	if (iri) {
	  parser.iri_list_push_back(iri);
	}
	delete condition_obj;
      
      } PARANTHRIGHT decl stmt_list {
	parser.table_factory.pop_table();

	// Generate code
	IRI* end_if_label;
	IRI* jump_to_end;

	end_if_label = parser.label_to_iri(parser.peek_label());
	parser.pop_label();
	jump_to_end = parser.jump_to_label(parser.peek_label());
	parser.iri_list_push_back(jump_to_end);
	parser.iri_list_push_back(end_if_label);
    } 
    ;
  else_part_recursive
    : else_part else_part_recursive
    |
    ;
  if_stmt
    : if_part else_part_recursive ENDIF {
	parser.iri_list_push_back(parser.label_to_iri(parser.peek_label()));
	parser.pop_label(); 
      }
    ;
  cond	: expr compop expr {
	    $$ = new ConditionObject(
	      static_cast<DataObject*>($1),
	      static_cast<DataObject*>($3),
	      static_cast<ConditionObject::comp_t>($2)
	    );
	  }
	| TRUE  {$$ = new ConditionObject(0, 0, ConditionObject::TRUE);}
	| FALSE {$$ = new ConditionObject(0, 0, ConditionObject::FALSE);} 
	;

  compop  : LESSTHAN	      {$$ = ConditionObject::LT;}
	  | GREATERTHAN	      {$$ = ConditionObject::GT;} 
	  | EQUAL	      {$$ = ConditionObject::EQ;} 
	  | NOTEQUAL	      {$$ = ConditionObject::NE;}
	  | LESSTHANEQUAL     {$$ = ConditionObject::LE;}
	  | GREATERTHANEQUAL  {$$ = ConditionObject::GE;}
	  ;

  do_head
    : DO {
      std::string name ("BLOCK ");
      std::string num = std::to_string(static_cast<long long>(block_num++));
      name += num;
      parser.table_factory.push_table(name);

      // Generate code
      parser.push_label(label_num++);
      parser.iri_list_push_back(
	parser.label_to_iri(parser.peek_label())
      );
      
      // 

    }
    ;
  do_while_stmt
    : do_head decl stmt_list WHILE PARANTHLEFT cond PARANTHRIGHT SEMICOLON {
      parser.table_factory.pop_table();

      // Generate code
      ConditionObject* comparison = static_cast<ConditionObject*>($6);
      parser.iri_list_push_back(comparison->generate_jump(parser.peek_label()));

      parser.pop_label();
      delete comparison;

    }
    ;

%%

void yyerror(LittleParser& parser, LittleScanner& scanner, const char* error){
    return parser.error(error);
  }

